<?xml version="1.0"?>
<doc>
    <assembly>
        <name>API</name>
    </assembly>
    <members>
        <member name="T:API.IoCConfig">
            <summary>
            API specific Inversion of Control setup.
            </summary>
        </member>
        <member name="M:API.IoCConfig.ConfigureIoC(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Sets up the container with required mappings for API.
            </summary>
            <param name="container">The Microsoft Unity container to register types on.</param>
        </member>
        <member name="T:API.App_Start.UnityWebApiActivator">
            <summary>Provides the bootstrapping for integrating Unity with WebApi when it is hosted in ASP.NET</summary>
        </member>
        <member name="M:API.App_Start.UnityWebApiActivator.Start">
            <summary>Integrates Unity when the application starts.</summary>
        </member>
        <member name="M:API.App_Start.UnityWebApiActivator.Shutdown">
            <summary>Disposes the Unity container when the application is shut down.</summary>
        </member>
        <member name="M:API.Areas.HelpPage.ApiDescriptionExtensions.GetFriendlyId(System.Web.Http.Description.ApiDescription)">
            <summary>
            Generates an URI-friendly ID for the <see cref="T:System.Web.Http.Description.ApiDescription"/>. E.g. "Get-Values-id_name" instead of "GetValues/{id}?name={name}"
            </summary>
            <param name="description">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The ID as a string.</returns>
        </member>
        <member name="T:API.Areas.HelpPage.HelpPageConfig">
            <summary>
            Use this class to customize the Help Page.
            For example you can set a custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> to supply the documentation
            or you can provide the samples for the requests/responses.
            </summary>
        </member>
        <member name="T:API.Areas.HelpPage.Controllers.HelpController">
            <summary>
            The controller that will handle requests for the help page.
            </summary>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageConfigurationExtensions.SetDocumentationProvider(System.Web.Http.HttpConfiguration,System.Web.Http.Description.IDocumentationProvider)">
            <summary>
            Sets the documentation provider for help page.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="documentationProvider">The documentation provider.</param>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleObjects(System.Web.Http.HttpConfiguration,System.Collections.Generic.IDictionary{System.Type,System.Object})">
            <summary>
            Sets the objects that will be used by the formatters to produce sample requests/responses.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleObjects">The sample objects.</param>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type and action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample request directly for the specified media type and action with parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type of the action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample response directly for the specified media type of the action with specific parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForMediaType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Sets the sample directly for all actions with the specified media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Sets the sample directly for all actions with the specified type and media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
            <param name="type">The parameter type or return type of an action.</param>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <returns>The help page sample generator.</returns>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageConfigurationExtensions.SetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration,API.Areas.HelpPage.HelpPageSampleGenerator)">
            <summary>
            Sets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleGenerator">The help page sample generator.</param>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageConfigurationExtensions.GetModelDescriptionGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the model description generator.
            </summary>
            <param name="config">The configuration.</param>
            <returns>The <see cref="T:API.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator"/></returns>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageApiModel(System.Web.Http.HttpConfiguration,System.String)">
            <summary>
            Gets the model that represents an API displayed on the help page. The model is initialized on the first call and cached for subsequent calls.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="apiDescriptionId">The <see cref="T:System.Web.Http.Description.ApiDescription"/> ID.</param>
            <returns>
            An <see cref="T:API.Areas.HelpPage.Models.HelpPageApiModel"/>
            </returns>
        </member>
        <member name="T:API.Areas.HelpPage.ModelDescriptions.ModelDescription">
            <summary>
            Describes a type model.
            </summary>
        </member>
        <member name="T:API.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator">
            <summary>
            Generates model descriptions for given types.
            </summary>
        </member>
        <member name="T:API.Areas.HelpPage.ModelDescriptions.ModelNameAttribute">
            <summary>
            Use this attribute to change the name of the <see cref="T:API.Areas.HelpPage.ModelDescriptions.ModelDescription"/> generated for a type.
            </summary>
        </member>
        <member name="T:API.Areas.HelpPage.Models.HelpPageApiModel">
            <summary>
            The model that represents an API displayed on the help page.
            </summary>
        </member>
        <member name="M:API.Areas.HelpPage.Models.HelpPageApiModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:API.Areas.HelpPage.Models.HelpPageApiModel"/> class.
            </summary>
        </member>
        <member name="P:API.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription">
            <summary>
            Gets or sets the <see cref="P:API.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription"/> that describes the API.
            </summary>
        </member>
        <member name="P:API.Areas.HelpPage.Models.HelpPageApiModel.UriParameters">
            <summary>
            Gets or sets the <see cref="T:API.Areas.HelpPage.ModelDescriptions.ParameterDescription"/> collection that describes the URI parameters for the API.
            </summary>
        </member>
        <member name="P:API.Areas.HelpPage.Models.HelpPageApiModel.RequestDocumentation">
            <summary>
            Gets or sets the documentation for the request.
            </summary>
        </member>
        <member name="P:API.Areas.HelpPage.Models.HelpPageApiModel.RequestModelDescription">
            <summary>
            Gets or sets the <see cref="T:API.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the request body.
            </summary>
        </member>
        <member name="P:API.Areas.HelpPage.Models.HelpPageApiModel.RequestBodyParameters">
            <summary>
            Gets the request body parameter descriptions.
            </summary>
        </member>
        <member name="P:API.Areas.HelpPage.Models.HelpPageApiModel.ResourceDescription">
            <summary>
            Gets or sets the <see cref="T:API.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the resource.
            </summary>
        </member>
        <member name="P:API.Areas.HelpPage.Models.HelpPageApiModel.ResourceProperties">
            <summary>
            Gets the resource property descriptions.
            </summary>
        </member>
        <member name="P:API.Areas.HelpPage.Models.HelpPageApiModel.SampleRequests">
            <summary>
            Gets the sample requests associated with the API.
            </summary>
        </member>
        <member name="P:API.Areas.HelpPage.Models.HelpPageApiModel.SampleResponses">
            <summary>
            Gets the sample responses associated with the API.
            </summary>
        </member>
        <member name="P:API.Areas.HelpPage.Models.HelpPageApiModel.ErrorMessages">
            <summary>
            Gets the error messages associated with this model.
            </summary>
        </member>
        <member name="T:API.Areas.HelpPage.HelpPageSampleGenerator">
            <summary>
            This class will generate the samples for the help page.
            </summary>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageSampleGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:API.Areas.HelpPage.HelpPageSampleGenerator"/> class.
            </summary>
        </member>
        <member name="P:API.Areas.HelpPage.HelpPageSampleGenerator.ActualHttpMessageTypes">
            <summary>
            Gets CLR types that are used as the content of <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
        </member>
        <member name="P:API.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples">
            <summary>
            Gets the objects that are used directly as samples for certain actions.
            </summary>
        </member>
        <member name="P:API.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects">
            <summary>
            Gets the objects that are serialized as samples by the supported formatters.
            </summary>
        </member>
        <member name="P:API.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories">
            <summary>
            Gets factories for the objects that the supported formatters will serialize as samples. Processed in order,
            stopping when the factory successfully returns a non-<see langref="null"/> object.
            </summary>
            <remarks>
            Collection includes just <see cref="M:API.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)"/> initially. Use
            <code>SampleObjectFactories.Insert(0, func)</code> to provide an override and
            <code>SampleObjectFactories.Add(func)</code> to provide a fallback.</remarks>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageSampleGenerator.GetSampleRequests(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the request body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageSampleGenerator.GetSampleResponses(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the response body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageSampleGenerator.GetSample(System.Web.Http.Description.ApiDescription,API.Areas.HelpPage.SampleDirection)">
            <summary>
            Gets the request or response body samples.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageSampleGenerator.GetActionSample(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Type,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,API.Areas.HelpPage.SampleDirection)">
            <summary>
            Search for samples that are provided directly through <see cref="P:API.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples"/>.
            </summary>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="type">The CLR type.</param>
            <param name="formatter">The formatter.</param>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The sample that matches the parameters.</returns>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageSampleGenerator.GetSampleObject(System.Type)">
            <summary>
            Gets the sample object that will be serialized by the formatters. 
            First, it will look at the <see cref="P:API.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects"/>. If no sample object is found, it will try to create
            one using <see cref="M:API.Areas.HelpPage.HelpPageSampleGenerator.DefaultSampleObjectFactory(API.Areas.HelpPage.HelpPageSampleGenerator,System.Type)"/> (which wraps an <see cref="T:API.Areas.HelpPage.ObjectGenerator"/>) and other
            factories in <see cref="P:API.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>The sample object.</returns>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageSampleGenerator.ResolveHttpRequestMessageType(System.Web.Http.Description.ApiDescription)">
            <summary>
            Resolves the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The type.</returns>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageSampleGenerator.ResolveType(System.Web.Http.Description.ApiDescription,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},API.Areas.HelpPage.SampleDirection,System.Collections.ObjectModel.Collection{System.Net.Http.Formatting.MediaTypeFormatter}@)">
            <summary>
            Resolves the type of the action parameter or return value when <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/> is used.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or a response.</param>
            <param name="formatters">The formatters.</param>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageSampleGenerator.WriteSampleObjectUsingFormatter(System.Net.Http.Formatting.MediaTypeFormatter,System.Object,System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Writes the sample object using formatter.
            </summary>
            <param name="formatter">The formatter.</param>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="mediaType">Type of the media.</param>
            <returns></returns>
        </member>
        <member name="T:API.Areas.HelpPage.HelpPageSampleKey">
            <summary>
            This is used to identify the place where the sample should be applied.
            </summary>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Creates a new <see cref="T:API.Areas.HelpPage.HelpPageSampleKey"/> based on media type.
            </summary>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Creates a new <see cref="T:API.Areas.HelpPage.HelpPageSampleKey"/> based on media type and CLR type.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="type">The CLR type.</param>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageSampleKey.#ctor(API.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:API.Areas.HelpPage.HelpPageSampleKey"/> based on <see cref="P:API.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="sampleDirection">The <see cref="P:API.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:API.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,API.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:API.Areas.HelpPage.HelpPageSampleKey"/> based on media type, <see cref="P:API.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The <see cref="P:API.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="P:API.Areas.HelpPage.HelpPageSampleKey.ControllerName">
            <summary>
            Gets the name of the controller.
            </summary>
            <value>
            The name of the controller.
            </value>
        </member>
        <member name="P:API.Areas.HelpPage.HelpPageSampleKey.ActionName">
            <summary>
            Gets the name of the action.
            </summary>
            <value>
            The name of the action.
            </value>
        </member>
        <member name="P:API.Areas.HelpPage.HelpPageSampleKey.MediaType">
            <summary>
            Gets the media type.
            </summary>
            <value>
            The media type.
            </value>
        </member>
        <member name="P:API.Areas.HelpPage.HelpPageSampleKey.ParameterNames">
            <summary>
            Gets the parameter names.
            </summary>
        </member>
        <member name="P:API.Areas.HelpPage.HelpPageSampleKey.SampleDirection">
            <summary>
            Gets the <see cref="P:API.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.
            </summary>
        </member>
        <member name="T:API.Areas.HelpPage.ImageSample">
            <summary>
            This represents an image sample on the help page. There's a display template named ImageSample associated with this class.
            </summary>
        </member>
        <member name="M:API.Areas.HelpPage.ImageSample.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Areas.HelpPage.ImageSample"/> class.
            </summary>
            <param name="src">The URL of an image.</param>
        </member>
        <member name="T:API.Areas.HelpPage.InvalidSample">
            <summary>
            This represents an invalid sample on the help page. There's a display template named InvalidSample associated with this class.
            </summary>
        </member>
        <member name="T:API.Areas.HelpPage.ObjectGenerator">
            <summary>
            This class will create an object of a given type and populate it with sample data.
            </summary>
        </member>
        <member name="M:API.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)">
            <summary>
            Generates an object for a given type. The type needs to be public, have a public default constructor and settable public properties/fields. Currently it supports the following types:
            Simple types: <see cref="T:System.Int32"/>, <see cref="T:System.String"/>, <see cref="T:System.Enum"/>, <see cref="T:System.DateTime"/>, <see cref="T:System.Uri"/>, etc.
            Complex types: POCO types.
            Nullables: <see cref="T:System.Nullable`1"/>.
            Arrays: arrays of simple types or complex types.
            Key value pairs: <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            Tuples: <see cref="T:System.Tuple`1"/>, <see cref="T:System.Tuple`2"/>, etc
            Dictionaries: <see cref="T:System.Collections.Generic.IDictionary`2"/> or anything deriving from <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            Collections: <see cref="T:System.Collections.Generic.IList`1"/>, <see cref="T:System.Collections.Generic.IEnumerable`1"/>, <see cref="T:System.Collections.Generic.ICollection`1"/>, <see cref="T:System.Collections.IList"/>, <see cref="T:System.Collections.IEnumerable"/>, <see cref="T:System.Collections.ICollection"/> or anything deriving from <see cref="T:System.Collections.Generic.ICollection`1"/> or <see cref="T:System.Collections.IList"/>.
            Queryables: <see cref="T:System.Linq.IQueryable"/>, <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>An object of the given type.</returns>
        </member>
        <member name="T:API.Areas.HelpPage.SampleDirection">
            <summary>
            Indicates whether the sample is used for request or response
            </summary>
        </member>
        <member name="T:API.Areas.HelpPage.TextSample">
            <summary>
            This represents a preformatted text sample on the help page. There's a display template named TextSample associated with this class.
            </summary>
        </member>
        <member name="T:API.Areas.HelpPage.XmlDocumentationProvider">
            <summary>
            A custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> that reads the API documentation from an XML documentation file.
            </summary>
        </member>
        <member name="M:API.Areas.HelpPage.XmlDocumentationProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Areas.HelpPage.XmlDocumentationProvider"/> class.
            </summary>
            <param name="documentPath">The physical path to XML document.</param>
        </member>
        <member name="M:API.Authorization.AdminFilterAttribute.OnAuthorization(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            OnAuthorization is called whenever a method has the data annotation "[AdminFilter]".
            Checks if the manager is authorized.
            </summary>
            <param name="actionContext"></param>
        </member>
        <member name="M:API.Authorization.ApiKeyFilter.OnAuthorization(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            OnAuthorization is called whenever a method has the data annotation "[ApiKeyFilter]".
            Checks if the user is authorized.
            </summary>
            <param name="actionContext"></param>
        </member>
        <member name="T:API.Controllers.EmployeeController">
            <summary>
            Controller to manipulate with the employees.
            </summary>
        </member>
        <member name="M:API.Controllers.EmployeeController.#ctor(API.Authorization.IAuthManager,Data.Services.IEmployeeService,API.Logic.PhotoMapper)">
            <summary>
            The constructor of the employee controller
            </summary>
            <param name="authManager"></param>
            <param name="employeeService"></param>
            <param name="photoMapper"></param>
        </member>
        <member name="M:API.Controllers.EmployeeController.Register(DataTransferObjects.Employee.CreateEmployeeDTO)">
            <summary>
            Creates the employee from the content in the body.
            Requires 'Authorization' header set with the token granted upon manager login.
            </summary>
            <returns>
            Returns 'Created' (201) if the employee gets created.
            If an employee already exist with the given email, the controller will return BadRequest (400).
            </returns>
        </member>
        <member name="M:API.Controllers.EmployeeController.RegisterMany(DataTransferObjects.Employee.CreateEmployeeDTO[])">
            <summary>
            Creates the employees from the content in the body.
            Requires 'Authorization' header set with the token granted upon manager login.
            </summary>
            <returns>
            Returns 'Created' (201) if the employees gets created.
            </returns>
        </member>
        <member name="M:API.Controllers.EmployeeController.Get">
            <summary>
            Gets all the employees.
            Requires 'Authorization' header set with the token granted upon manager login.
            </summary>
            <returns>
            Returns an array of employees.
            </returns>
        </member>
        <member name="M:API.Controllers.EmployeeController.Get(System.Int32)">
            <summary>
            Gets the employee with the given id.
            Requires 'Authorization' header set with the token granted upon manager login.
            </summary>
            <param name="id">The id of the employee.</param>
            <returns>
            Returns the employee with the given id. 
            If no employee is found with the corresponding id, the controller will return NotFound (404)
            </returns>
        </member>
        <member name="M:API.Controllers.EmployeeController.Get(System.String)">
            <summary>
            Gets all the employees.
            Requires 'apiKey' parameter set with the api key of the institution.
            </summary>
            <returns>
            Returns an array of employees.
            </returns>
        </member>
        <member name="M:API.Controllers.EmployeeController.Put(System.Int32,DataTransferObjects.Employee.UpdateEmployeeDTO)">
            <summary>
            Updates the employee with the specified id.
            Requires 'Authorization' header set with the token granted upon manager login.
            </summary>
            <param name="id">The id of the employee.</param>
            <param name="employeeDto">The dto of the employee</param>
            <returns>
            Returns 'No Content' (204) if the employee gets updated.
            If no employee is found with the given id, the controller will return NotFound (404)
            </returns>
        </member>
        <member name="M:API.Controllers.EmployeeController.Delete(System.Int32)">
            <summary>
            Deletes the employee with the specified id.
            Requires 'Authorization' header set with the token granted upon manager login.
            </summary>
            <param name="id">The id of the employee.</param>
            <returns>Returns 'No Content' (204) if the employee gets deleted.</returns>
        </member>
        <member name="T:API.Controllers.EmployeeTitleController">
            <summary>
            Controller to manipulate with the employee titles.
            </summary>
        </member>
        <member name="M:API.Controllers.EmployeeTitleController.#ctor(API.Authorization.IAuthManager,Data.Services.IEmployeeTitleService)">
            <summary>
            Employee title controller constructor
            </summary>
            <param name="authManager"></param>
            <param name="employeeTitleService"></param>
        </member>
        <member name="M:API.Controllers.EmployeeTitleController.Register(DataTransferObjects.EmployeeTitles.CreateEmployeeTitleDTO)">
            <summary>
            Creates the employee title from the content in the body.
            Requires 'Authorization' header set with the token granted upon manager login.
            </summary>
            <returns>
            Returns 'Created' (201) if the employee title gets created.
            </returns>
        </member>
        <member name="M:API.Controllers.EmployeeTitleController.Get">
            <summary>
            Gets all the employee titles.
            Requires 'Authorization' header set with the token granted upon manager login.
            </summary>
            <returns>
            Returns an array of employee titles.
            </returns>
        </member>
        <member name="M:API.Controllers.EmployeeTitleController.Get(System.Int32)">
            <summary>
            Gets the employee title with the given id.
            Requires 'Authorization' header set with the token granted upon manager login.
            </summary>
            <param name="id">The id of the employee title.</param>
            <returns>
            Returns the employee title with the given id. 
            If no employee title is found with the corresponding id, the controller will return NotFound (404)
            </returns>
        </member>
        <member name="M:API.Controllers.EmployeeTitleController.Put(System.Int32,DataTransferObjects.EmployeeTitles.UpdateEmployeeTitleDTO)">
            <summary>
            Updates the employee title with the specified id.
            Requires 'Authorization' header set with the token granted upon manager login.
            </summary>
            <param name="id">The id of the employee title.</param>
            <param name="employeeTitleDto">The employee title dto</param>
            <returns>
            Returns 'No Content' (204) if the employee title gets updated.
            If no employee title is found with the given id, the controller will return NotFound (404)
            </returns>
        </member>
        <member name="M:API.Controllers.EmployeeTitleController.Delete(System.Int32)">
            <summary>
            Deletes the employee title with the specified id.
            Requires 'Authorization' header set with the token granted upon manager login.
            </summary>
            <param name="id">The id of the employee title.</param>
            <returns>Returns 'No Content' (204) if the employee title gets deleted.</returns>
        </member>
        <member name="T:API.Controllers.ManagerController">
            <summary>
            Controller to validate authority (login etc.)
            </summary>
        </member>
        <member name="M:API.Controllers.ManagerController.#ctor(Data.Repositories.IManagerRepository)">
            <summary>
            The controller constructor.
            </summary>
        </member>
        <member name="M:API.Controllers.ManagerController.Login(DataTransferObjects.Manager.ManagerLoginDTO)">
            <summary>
            Login as the manager with the given credentials in the body
            </summary>
            <returns>
            Returns 'Ok' (200) with a valid token if the provided username and password matches.
            If the provided credentials are wrong then the controller will return Unauthorized (401).
            </returns>
        </member>
        <member name="M:API.Controllers.ManagerController.Validate">
            <summary>
            Validates the token set in the 'Authorization' header.
            </summary>
            <returns>
            Returns 'Ok' (200) if the token is valid.
            If the token is invalid then the controller will return Unauthorized (401).
            </returns>
        </member>
        <member name="M:API.Controllers.PhotosController.Get(System.Int32,System.Int32)">
            <summary>
            Retrieves a photo from an organization.
            </summary>
            <param name="photoId">Id of the photo.</param>
            <param name="organizationId">Id of the organization.</param>
            <returns>
            A response containing the image if found. 
            If the provided authorization token is invalid: Http 400 (Bad Request) is returned.
            If the photo is not found: Http 404 (Not Found) is returned.</returns>
        </member>
        <member name="T:API.Controllers.ScheduleController">
            <summary>
            Controller to manage schedule
            </summary>
        </member>
        <member name="M:API.Controllers.ScheduleController.#ctor(API.Authorization.IAuthManager,Data.Services.IScheduleService)">
            <summary>
            The constructor of the schedule controller
            </summary>
            <param name="authManager"></param>
            <param name="scheduleService"></param>
        </member>
        <member name="M:API.Controllers.ScheduleController.Get">
            <summary>
            Gets all the schedules.
            Requires 'Authorization' header set with the token granted upon manager login.
            </summary>
            <returns>
            Returns an array of schedules.
            </returns>
        </member>
        <member name="M:API.Controllers.ScheduleController.Get(System.Int32)">
            <summary>
            Gets the schedule with the given id.
            Requires 'Authorization' header set with the token granted upon manager login.
            </summary>
            <param name="id">The id of the schedule.</param>
            <returns>
            Returns the schedule with the given id. 
            If no schedule is found with the corresponding id, the controller will return NotFound (404)
            </returns>
        </member>
        <member name="M:API.Controllers.ScheduleController.Register(DataTransferObjects.Schedule.CreateScheduleDTO)">
            <summary>
            Creates the schedule from the content in the body.
            Requires 'Authorization' header set with the token granted upon manager login.
            </summary>
            <returns>
            Returns 'Created' (201) if the schedule gets created.
            </returns>
        </member>
        <member name="M:API.Controllers.ScheduleController.Delete(System.Int32)">
            <summary>
            Deletes the schedule with the specified id.
            Requires 'Authorization' header set with the token granted upon manager login.
            </summary>
            <param name="id">The id of the schedule.</param>
            <returns>Returns 'No Content' (204) if the schedule gets deleted.</returns>
        </member>
        <member name="M:API.Controllers.ScheduleController.UpdateSchedule(System.Int32,DataTransferObjects.Schedule.UpdateScheduleDTO)">
            <summary>
            Updates the schedule with the given id from the content in the body.
            Requires 'Authorization' header set with the token granted upon manager login.
            </summary>
            <returns>
            Returns 'No Content' (204) if the schedule gets updated.
            </returns>
        </member>
        <member name="M:API.Controllers.ScheduleController.CreateScheduledShift(System.Int32,DataTransferObjects.ScheduledShift.CreateScheduledShiftDTO)">
            <summary>
            Creates the scheduled shift to the schedule with the given id from the content in the body.
            Requires 'Authorization' header set with the token granted upon manager login.
            </summary>
            <returns>
            Returns 'Created' (201) if the scheduled shift gets created.
            </returns>
        </member>
        <member name="M:API.Controllers.ScheduleController.UpdateScheduledShift(System.Int32,System.Int32,DataTransferObjects.ScheduledShift.UpdateScheduledShiftDTO)">
            <summary>
            Updates the scheduled shift with the given id from the content in the body.
            Requires 'Authorization' header set with the token granted upon manager login.
            </summary>
            <returns>
            Returns 'No Content' (204) if the scheduled shift gets updated.
            </returns>
        </member>
        <member name="M:API.Controllers.ScheduleController.DeleteScheduledShift(System.Int32,System.Int32)">
            <summary>
            Deletes the scheduled shift with the given id.
            Requires 'Authorization' header set with the token granted upon manager login.
            </summary>
            <returns>
            Returns 'No Content' (204) if the scheduled shift gets deleted.
            </returns>
        </member>
        <member name="M:API.Controllers.ScheduleController.CreateMultipleScheduledShift(System.Int32,System.Collections.Generic.IEnumerable{DataTransferObjects.ScheduledShift.CreateScheduledShiftDTO})">
            <summary>
            Creates the scheduled shifts to the schedule with the given id from the content in the body.
            Requires 'Authorization' header set with the token granted upon manager login.
            </summary>
            <returns>
            Returns 'Created' (201) if the scheduled shifts gets created.
            </returns>
        </member>
        <member name="M:API.Controllers.ScheduleController.RolloutSchedule(System.Int32,DataTransferObjects.Schedule.RolloutScheduleDTO)">
            <summary>
            Creates shifts from the set schedule id in the interval set in the body with from and to datetimes.
            Requires 'Authorization' header set with the token granted upon manager login.
            </summary>
            <returns>
            Returns 'Created' (201) if the scheduled gets rolled out.
            </returns>
        </member>
        <member name="M:API.Controllers.ScheduleController.FindOptimalSchedule(System.Int32)">
            <summary>
            Find the optimal schedule from the given input CSV file.
            Requires 'Authorization' header set with the token granted upon manager login.
            </summary>
            <returns>
            Returns 'Ok' (200) if an optimal schedule can be found.
            </returns>
        </member>
        <member name="T:API.Controllers.ShiftController">
            <summary>
            Controller to manage shifts
            </summary>
        </member>
        <member name="M:API.Controllers.ShiftController.#ctor(API.Authorization.IAuthManager,Data.Services.IShiftService)">
            <summary>
            The constructor of the shift controller
            </summary>
            <param name="authManager"></param>
            <param name="shiftService"></param>
        </member>
        <member name="M:API.Controllers.ShiftController.Get">
            <summary>
            Returns all shifts of the specified organization in the 'Authorization' header
            </summary>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.ShiftController.Get(System.Int32)">
            <summary>
            Returns the shift for the given id in the parameter
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.ShiftController.Delete(System.Int32)">
            <summary>
            Deletes the shift with the given id in the parameter
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.ShiftController.Update(System.Int32,DataTransferObjects.Shift.UpdateShiftDTO)">
            <summary>
            Updates the shift with the id in the parameter with the content in the body
            </summary>
            <param name="id"></param>
            <param name="shiftDto"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.ShiftController.Create(DataTransferObjects.Shift.CreateShiftDTO)">
            <summary>
            Creates a shift with the given employees for the given time defined in the body
            </summary>
            <param name="shiftDto"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.ShiftController.Today">
            <summary>
            Gets the shifts for today
            </summary>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.ShiftController.OnGoing">
            <summary>
            Gets the shifts currently ongoing with the corresponding employees planned to be on the shift and the employees checked-in on that shift
            </summary>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.ShiftController.CheckIn(System.Int32,System.Int32)">
            <summary>
            Checks in the employee with the given employee id in the parameters for the given shift id in the parameters
            </summary>
            <param name="id"></param>
            <param name="employeeId"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.ShiftController.AddEmployees(System.Int32,DataTransferObjects.Shift.AddEmployeesDTO)">
            <summary>
            Adds the employees from the body to the given shift
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.ShiftController.CreateOutsideSchedule(DataTransferObjects.Shift.CreateShiftDTO)">
            <summary>
            Creates a shift with the given employees from now (rounded up to nearest 15 minutes) and for the next xx minutes defined in the body
            </summary>
            <param name="shiftDto"></param>
            <returns></returns>
        </member>
        <member name="M:API.Logic.PhotoMapper.ParseBase64Photo(System.String,Data.Models.Organization)">
            <summary>
            
            </summary>
            <param name="base64EncodedPhoto"></param>
            <param name="organization"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the encoded string does not contain a media type.</exception>
        </member>
    </members>
</doc>
